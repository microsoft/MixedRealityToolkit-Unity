// TODO: [Optional] Add copyright and license statement(s).

using Microsoft.MixedReality.Toolkit;
using Microsoft.MixedReality.Toolkit.Subsystems;
using System;

namespace %NAMESPACE%
{
    /// <summary>
    /// Encapsulates the parameters for creating a new <see cref="%SUBSYSTEMBASECLASSNAME%Descriptor"/>.
    /// </summary>
    public class %SUBSYSTEMBASECLASSNAME%Cinfo : MRTKSubsystemCinfo
    {
        // TODO: Add subsystem specific properties.

        /// <summary>
        /// Tests for equality.
        /// </summary>
        /// <param name="other">The other <see cref="%SUBSYSTEMNAME%"/> to compare against.</param>
        /// <returns>`True` if every field in <paramref name="other"/> is equal to this <see cref="%SUBSYSTEMBASECLASSNAME%"/>, otherwise false.</returns>
        public override bool Equals(MRTKSubsystemCinfo other)
        {
            // TODO: Add comparison of subsystem specific property values.
            return base.Equals(other);
        }
    }

    /// <summary>
    /// Specifies a functionality description that may be registered for each implementation that provides the
    /// <see cref="%SUBSYSTEMBASECLASSNAME%"/> interface.
    /// </summary>
    public class %SUBSYSTEMBASECLASSNAME%Descriptor :
        MRTKSubsystemDescriptor<%SUBSYSTEMBASECLASSNAME%, %SUBSYSTEMBASECLASSNAME%.Provider>
    {
        /// <summary>
        /// Constructs a <c>%SUBSYSTEMBASECLASSNAME%Descriptor</c> based on the given parameters.
        /// </summary>
        /// <param name=cinfo>The parameters required to initialize the descriptor.</param>
        %SUBSYSTEMBASECLASSNAME%Descriptor(%SUBSYSTEMBASECLASSNAME%Cinfo cinfo) : base(cinfo)
        {
            // TODO: Initialize subsystem specific properties.
        }

        // TODO: Add subsystem specific properties.

        /// <summary>
        /// Creates a <c>%SUBSYSTEMBASECLASSNAME%Descriptor</c> based on the given parameters validating that the
        /// <c>id</c> and <c>implentationType</c> properties are specified.
        /// </summary>
        /// <param name='cinfo'>The parameters required to initialize the descriptor.</param>
        /// <returns>
        /// The created <c>%SUBSYSTEMBASECLASSNAME%Descriptor</c>.
        /// </returns>
        internal static %SUBSYSTEMBASECLASSNAME%Descriptor Create(%SUBSYSTEMBASECLASSNAME%Cinfo cinfo)
        {
            // Validates cinfo.
            if (!XRSubsystemHelpers.CheckTypes<%SUBSYSTEMBASECLASSNAME%, %SUBSYSTEMBASECLASSNAME%.Provider>(
                    cinfo.Name,
                    cinfo.SubsystemTypeOverride,
                    cinfo.ProviderType))
            {
                throw new ArgumentException("Could not create %SUBSYSTEMBASECLASSNAME%Descriptor.");
            }

            return new %SUBSYSTEMBASECLASSNAME%Descriptor(cinfo);
        }
    }
}
