using Microsoft.MixedReality.Toolkit.Subsystems;
using UnityEngine.SubsystemsImplementation;

namespace %NAMESPACE%
{
    public class %SUBSYSTEMNAME% :
        MRTKSubsystem<%SUBSYSTEMNAME%, %SUBSYSTEMNAME%Descriptor, %SUBSYSTEMNAME%.Provider>,
        I%SUBSYSTEMNAME%
    {
        /// <summary>
        /// Construct the <c>%SUBSYSTEMNAME%</c>.
        /// </summary>
        public %SUBSYSTEMNAME%()
        { }

        public abstract class Provider : MRTKSubsystemProvider<%SUBSYSTEMNAME%>, I%SUBSYSTEMNAME%
        {
            #region I%SUBSYSTEMNAME% implementation

            // TODO: Implement abstract Provider class.

            #endregion I%SUBSYSTEMNAME% implementation
        }

        #region I%SUBSYSTEMNAME% implementation

        // TODO: Calls into abstract Provider (ex: public int MaxValue => provider.MaxValue;

        #endregion I%SUBSYSTEMNAME% implementation

        /// <summary>
        /// Registers a %SUBSYSTEMNAME% implementation based on the given subsystem parameters.
        /// </summary>
        /// <param name="subsystemParams">The parameters defining the %SUBSYSTEMNAME%
        /// functionality implemented by the subsystem provider.</param>
        /// <returns>
        /// <c>true</c> if the subsystem implementation is registered. Otherwise, <c>false</c>.
        /// </returns>
        public static bool Register(%SUBSYSTEMNAME%Cinfo subsystemParams)
        {
            %SUBSYSTEMNAME%Descriptor Descriptor = %SUBSYSTEMNAME%Descriptor.Create(subsystemParams);
            SubsystemDescriptorStore.RegisterDescriptor(Descriptor);
            return true;
        }
    }
}
